searchState.loadedDescShard("ledger_lib", 0, "A Ledger hardware wallet communication library\nList all devices available using supported transport\nList only BLE device\nDefault timeout helper for use with Device and Exchange\nDevice provides a high-level interface exchanging APDU …\nLedger interface error type\nExchange trait provides a low-level interface for …\nDevice discovery filter\nList only HID devices\nLedger device handle for interacting with LedgerProvider …\nLedger provider manages device discovery and connection\nRecognised status codes (see StatusCode)\nList only TCP devices\nUnrecognised status codes\nFetch application information\nFetch application information\nConnect to an available device\nFetch device information\nFetch device information\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a connection type to a discovery filter\nDevice information types and connection filters\nCreate or connect to the ledger provider instance\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLaunch an application by name and return a device handle.\nList available devices using the specified filter\nDelay prior to attempting device re-connection in seconds.\nTimeout for reconnect operations in seconds.\nIssue a request APDU, returning a reponse APDU\nIssue a request APDU to a device, encoding and decoding …\nLow-level transport implementations for communication with …\nApplication info object\nLedger connection information\nLedger connection types\nDevice info object\nLedger device information\nLedger device models\nNano S\nNano S Plus\nNano X\nStax\nUnknown model\nDevice connection information\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a USB PID to a Model kind\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFetch connection kind enumeration\nDevice Model\nBLE connected ledger device\nBLE specific device information\nTransport for listing and connecting to BLE connected …\nDevice handle for interacting with the device\nConnection filters\nGenericDevice for communication with ledger devices, …\nGenericTransport for device communication, abstracts …\nDevice information, used for listing and connecting\nTCP based device\nTCP device information\nTCP transport implementation for interacting with Speculos …\nTransport trait provides an abstract interface for …\nUSB HID based device\nBasic USB device information\nUSB HID based transport\nConnect to a device using info from a previous list …\nConnect to a device using the usb transport\nConnect to a specific ledger device\nConnect to a ledger device using available transports\nConnect to a TCP device using the provided TcpInfo\nExchange an APDU with the GenericDevice\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch connection info for a device\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList available devices\nList available devices using the UsbTransport\nList BLE connected ledger devices\nList available ledger devices using all enabled transports\nList available devices using the TcpTransport\nCreate a new UsbTransport\nCreate a new GenericTransport with all endabled transports\nCreate a new TcpTransport instance\nDevice path\nUSB Device Product ID (PID) in hex\nRead an APDU from the device\nIssue a request APDU to a device, encoding and decoding …\nIssue a request APDU to a device, encoding and decoding …\nIssue a request APDU to a device, encoding and decoding …\nIssue a request APDU to a device, encoding and decoding …\nUSB Device Vendor ID (VID) in hex\nWrite an APDU to the device")