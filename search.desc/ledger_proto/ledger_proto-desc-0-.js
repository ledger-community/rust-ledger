searchState.loadedDescShard("ledger_proto", 0, "Ledger Hardware Wallet APDU traits and shared types.\nAccess condition not fulfilled\nAlgorithm not supported\nGeneric APDU base trait, auto-implemented where …\nAPDU error type\nAPDU command header\nGeneric APDU request trait\nHelper trait for defining static APDU commands, …\nClass ID for APDU commands\nAPDU class not supported\nCode blocked\nCode not initialized\nCommand incompatible file structure\nConditions of use not satisfied\nContradiction invalidation\nContradiction secret code status\nCustom image bootloader\nCustom image empty\nDecode trait implemented for binary decodable objects\n<code>#[derive(Decode)]</code> support.\nDecode trait implemented for owned types\n<code>#[derive(DecodeOwned)]</code> support.\nDevice not onboarded\nDevice also not onboarded\nComposite trait requiring an object is reversibly …\nEncode trait implemented for binary encodable objects\n<code>#[derive(Encode)]</code> support.\nError type returned on parse error\nError type returned on parse error\nError type returned on parse error\nFile already exists\nFile not found\nGeneric APDU object (enabled with <code>alloc</code> feature), prefer …\nGP auth failed\nDevice halted\nInstruction ID for APDU commands\nInconsistent file\nIncorrect data\nIncorrect length\nIncorrect P1 or P2 values\nInstruction not supported\nInvalid APDU encoding\nInvalid KCV\nInvalid buffer length\nInvalid offset\nInvalid Utf8 string encoding\nInvalid APDU variant\nInvalid APDU encoding version {0}\nLicensing error\nDevice locked\nMax value reached\nMemory problem\nMissing critical parameter\nNo EF selected\nNot enough memory space\nNot enough space\nOK\nOutput type\nOutput type (allows attaching lifetime bounds where …\nRemaining PIN attempts\nReferenced data not found\nSecurity status not satisfied\nDevice status codes (two bytes, trailing response data)\nTechnical problem\nUnknown APDU\nUser refused on device\nLedger common APDU definitions\nClass ID\nAPDU data\nDecode consumes a slice and returns an object and decoded …\nDecode consumes a slice and returns an object and decoded …\nEncode method writes object data to the provided writer\nCalculate expected encoded length for an object\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch the ApduHeader for a given APDU request\nRequest APDU Header (uses Default for incoming / response …\nInstruction ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFetch P1 value (defaults to <code>0</code> if not extended)\nParameter 1\nFetch P2 value (defaults to <code>0</code> if not extended)\nParameter 2\nApplication info flags\nApplication information request APDU\nApplication information response APDU\nDevice info APDU command\nDevice info APDU response\nExit application request APDU, used to exit a running …\nHSM initialised\nUser onboarded\nPIN validated\nRecovery mode\nRun application request APDU, request to BOLOS to launch …\nSigned application\n??\n??\nGet a flags value with all known bits set.\nApplication name to launch (note this is case sensitive)\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nDecode an device info APDU from the provided buffer\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nEncode an device info APDU into the provided buffer\nCompute APDU encoded length\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nApplication flags\nDevice Flag(s)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nMCU Version\nApplication name\nCreate a new application version APDU\nCreate a new device info APDU\nCreate a new run application request APDU\nCreate a new exit application request\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nSecure Element Version\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTarget ID\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nApplication version")